import cosc343.assig2.Creature;
import java.util.Random;


/**
* The MyCreate extends the cosc343 assignment 2 Creature.  Here you implement
* creatures chromosome and the agent function that maps creature percepts to
* actions.  
*
* @author  Meiqi Sun
* @version 1.0
* @since   2017-04-05 
*/
public class MyCreature extends Creature {

  // Random number generator
  Random rand = new Random();
  float[] chromosome;
  
  /* Empty constructor - might be a good idea here to put the code that 
   initialises the chromosome to some random state   
  
   Input: numPercept - number of percepts that creature will be receiving
          numAction - number of action output vector that creature will need
                      to produce on every turn
   Chromosome:float array 0-1
   
   Five: 0.monster related:
             0:ignore the monster 
             1:go to where the monster is
             2:go opposite to where the monster is
         1.creature related
             0:ignore the creature 
             1:go to where the creature is
             2:go opposite to where the creature is
         2.food related
             0:ignore the food
             1:go opposite to where the food is
             2:go to where the food is
         3.monsterWeight:
             0.low influence;
             1.middle influence;
             2.high influence;
         4.creatureWeight:
             0.low influence;
             1.middle influence;
             2.high influence;
         5.FoodWeight:
             0.low influence;
             1.middle influence;
             2.high influence;
         6.GreenWeight:
             0.low influence;
             1.middle influence;
             2.high influence;
         7.RedWeight:
             0.low influence;
             1.middle influence;
             2.high influence;
         9.randomWeight;
             0.low influence;
             1.middle influence;
             2.high influence;
         8.green strawberry related
             0:eat the green strawberry
             1:do not eat the green strawberry
         9.red strawberry related
             0:eat the red strawberry
             1:do not eat the red strawberry
  */
  public MyCreature(){
    chromosome = new float[10];
    
  }
  public MyCreature(int numPercepts, int numActions) {
    chromosome = new float[10];
    
    for (int i=0;i<8;i++){
      chromosome[i] = Math.abs(rand.nextInt())*2;
    }
    for (int i=8;i<10;i++){
      chromosome[i] = Math.abs(rand.nextInt());
    }
  }
  
  /* This function must be overridden by MyCreature, because it implements
     the AgentFunction which controls creature behavoiur.  This behaviour
     should be governed by a model (that you need to come up with) that is
     parameterise by the chromosome.  
  
     Input: percepts - an array of percepts
            numPercepts - the size of the array of percepts depend on the percept
                          chosen
            numExpectedAction - this number tells you what the expected size
                                of the returned array of percepts should bes
     Returns: an array of actions 
  */

  @Override
  public float[] AgentFunction(int[] percepts, int numPercepts, int numExpectedActions) {
      
      // This is where your chromosome gives rise to the model that maps
      // percepts to actions.  This function governs your creature's behaviour.
      // You need to figure out what model you want to use, and how you're going
      // to encode its parameters in a chromosome.
      
      // At the moment, the actions are chosen completely at random, ignoring
      // the percepts.  You need to replace this code.
      float actions[] = new float[numExpectedActions];
//      Int foodWeight=3;
//      Int monsterWeight=5;
//      Int creatureWeight=1;
//      Int redWeight=2;
//      Int greenWeight =0;
     
     
     
      //whether a monster is nearby, if yes,then the monster's opposite direction times monster weight 
      for(int i=0;i<9;i++){
        if (percepts[i]==1){
          actions[9-i]=chromosome[0]*chromosome[3];
          //actions[9-i]=chromosome[0]*monsterWeight;
        }
      }
      //whether other creature is nearby, if yes, then the creature's opposite direction times monster weight
      for(int i=9;i<18;i++){
        if (percepts[i]==1){
          actions[18-i]=chromosome[1]*chromosome[4];
          //actions[18-i]=chromosome[1]*creatureWeight;
        }
      }
      //whether other food is nearby
      for(int i=18;i<27;i++){
        if (percepts[i]>0){
          //actions[27-i]=chromosome[2]*chromosome[5];
          actions[27-i]=chromosome[2]*chromosome[5];
          if (percepts[i]==1){
            actions[9]=chromosome[6]*chromosome[8];
          }else{
            actions[9]=chromosome[7]*chromosome[9];
          }
        }
      }
      return actions;
  }//agent function ends
  
}